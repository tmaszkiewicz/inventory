import re
import ldap
from .models import machine
from .models import svr
from .models import user
from datetime import datetime
def check_credentials(username, password,filtr):
    """Verifies credentials for username and password.
    Returns None on success or a string describing the error on failure
    # Adapt to your needs
    """
    LDAP_SERVER = 'ldap://192.168.41.40'
    # fully qualified AD user name
    LDAP_USERNAME = '%s@jan.polipol.intra' % username
    print(LDAP_USERNAME)
    # your password
    LDAP_PASSWORD = password
    print(LDAP_PASSWORD)
    attrs = ['memberOf']
    try:
        # build a client
        ldap_client = ldap.initialize(LDAP_SERVER)
        # perform a synchronous bind
        ldap_client.set_option(ldap.OPT_REFERRALS,0)
        ldap_client.simple_bind_s(LDAP_USERNAME, LDAP_PASSWORD)
    except ldap.INVALID_CREDENTIALS:
        ldap_client.unbind()
        return 'Wrong username /  password'
    except ldap.SERVER_DOWN:
        return 'AD server not available'
   # all is well
   # get all user groups and store it in cerrypy session for future use
    workstations = read_machines(ldap_client,"DC=jan,DC=polipol,DC=intra",filtr)
    servers = read_svr(ldap_client,"DC=jan,DC=polipol,DC=intra")
    ldap_client.unbind()
    return None
def check_credentials_users(username, password):
    """Verifies credentials for username and password.
    Returns None on success or a string describing the error on failure
    # Adapt to your needs
    """
    LDAP_SERVER = 'ldap://192.168.41.40'
    # fully qualified AD user name
    LDAP_USERNAME = '%s@jan.polipol.intra' % username
    #print(LDAP_USERNAME)
    # your password
    LDAP_PASSWORD = password
    #print(LDAP_PASSWORD)
    attrs = ['memberOf']
    try:
        # build a client
        ldap_client = ldap.initialize(LDAP_SERVER)
        # perform a synchronous bind
        ldap_client.set_option(ldap.OPT_REFERRALS,0)
        ldap_client.simple_bind_s(LDAP_USERNAME, LDAP_PASSWORD)
    except ldap.INVALID_CREDENTIALS:
        ldap_client.unbind()
        return 'Wrong username /  password'
    except ldap.SERVER_DOWN:
        return 'AD server not available'
   # all is well
   # get all user groups and store it in cerrypy session for future use
    read_users(ldap_client,"DC=jan,DC=polipol,DC=intra")
    ldap_client.unbind()
    return None
def read_machines(ldap_client,base_dn,filtr):
    results = ldap_client.search_s(base_dn,ldap.SCOPE_SUBTREE,filtr)
    for dn,entry in results:
        try:
            cn = entry['cn'][0]
            try:
                operatingSystem = entry['operatingSystem'][0]
            except:
                operatingSystem = ""
            try:
                description = entry['description'][0]
            except:
                description = ""
            try:
                dNSHostName = entry['dNSHostName'][0]
            except:
                dNSHostName = ""
            try:
                distinguishedName = entry['distinguishedName'][0]
            except:
                distinguishedName = ""
            try:
                tmp1 = entry['distinguishedName'][0]
                tmp2 = tmp1[0:len(tmp1)]
                tmp3 = tmp2.decode().split(",")[1].split("=")[1]
                OU = tmp3
            except:
                OU = ""
            try:
                operatingSystemServicePack = entry['operatingSystemServicePack'][0]
            except:
                operatingSystemServicePack = ""
            print 
            if(machine.objects.filter(cn=cn).first() == None):
                comp = machine()
            else:
                comp = machine.objects.filter(cn=cn).first()
            comp.cn = cn
            comp.operatingSystem = operatingSystem
            comp.description= description
            comp.dNSHostName = dNSHostName
            comp.distinguishedName = distinguishedName
            comp.OU = OU
            comp.operatingSystemServicePack = operatingSystemServicePack
            comp.aktualizacja = datetime.now()
            comp.save()
                
        except:
            print(entry)
    return None
def read_svr(ldap_client,base_dn):
    results = ldap_client.search_s(base_dn,ldap.SCOPE_SUBTREE,"(&(cn=jan-svr*)(!(cn=*-pr-*)))" )
    for dn,entry in results:
        try:
            cn = entry['cn'][0]
            try:
                operatingSystem = entry['operatingSystem'][0]
            except:
                operatingSystem = ""
            try:
                description = entry['description'][0]
            except:
                description = ""
            try:
                dNSHostName = entry['dNSHostName'][0]
            except:
                dNSHostName = ""
            try:
                distinguishedName = entry['distinguishedName'][0]
            except:
                distinguishedName = ""
            try:
                tmp1 = entry['distinguishedName'][0]
                tmp2 = tmp1[0:len(tmp1)]
                tmp3 = tmp2.decode().split(",")[1].split("=")[1]
                OU = tmp3
                
            except:
                OU = ""
            try:
                operatingSystemServicePack = entry['operatingSystemServicePack'][0]
            except:
                operatingSystemServicePack = ""
            
            if(svr.objects.filter(cn=cn).first() == None):
                comp = svr()
            else:
                comp = svr.objects.filter(cn=cn).first 
            comp.cn = cn
            comp.operatingSystem = operatingSystem
            comp.description= description
            comp.dNSHostName = dNSHostName
            comp.distinguishedName = distinguishedName
            comp.OU = OU
            comp.operatingSystemServicePack = operatingSystemServicePack
            comp.save()
        except:
            print(entry)
    return None
def read_users(ldap_client,base_dn):
    results = ldap_client.search_s(base_dn,ldap.SCOPE_SUBTREE,"(sAMAccountType=805306368)")
    for dn,entry in results:
        try:
            cn = entry['cn'][0]
            try:
                distinguishedName = entry['distinguishedName'][0]
            except:
                distinguishedName = ""
            #try:
            #    memberOf = entry['memberOf'][0]
            #except:
            #    memberOf= ""
            #    print("2")
            try:
                primaryGroupID = entry['primaryGroupID'][0]
            except:
                primaryGroupID= ""
            try:
                name = entry['name'][0]
                
            except:
                name = ""
            try:
                sAMAccountName= entry['sAMAccountName'][0]
            except:
                SamAccountName = ""
            usr = user()
            usr.cn = cn
            usr.name = name
            usr.primaryGroupID = primaryGroupID 
            usr.distinguishedName = distinguishedName
            usr.sAMAccountName = sAMAccountName
            #usr.memberOf = memberOfmemberOf
            
            usrcmp = user.objects.filter(name=name.decode())
            #if len(usrcmp)<3:
            #    print(usrcmp)
            #if usrcmp[0].name[:1] == 'M':
            #    print(usrcmp[0].name)
        
            #print(user.objects.filter(name=usr.name)[0])
            if len(usrcmp)==0:
                usr.save()
            else:
                None
        except:
            None
       
    return None
def msqlquery(svr, user, psw, db, qry):
    import pymssql
    conn = pymssql.connect(svr,user, psw, db, qry)
    cursor = conn.cursor(as_dict=True)
    cursor.execute(qry)
    for each in cursor:
        print(each['Name'])
        
    return cursor
def delete_unrelated():
    users = user.objects.all()  
    k=0
    #.prefetch_related('machine_set')[0]
    for u in users:
        #m = u.prefetch_related('machine_set')[0]
        try:
            print(u.machine_set.first().cn)
        except:
            print(u, "-to be deleted")
            k+=1
            u.delete()
        print(k)
    #    for i in u.machine_set.all():
    #        print(i.cn)
    #for u in users:
    #    print(u.name,u.machine_set)
    #for u in users:
    #    print (u.machine_set.first())
