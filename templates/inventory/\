import ldap
from .models import machine
from .models import svr
from .models import user
def check_credentials(username, password):
    """Verifies credentials for username and password.
    Returns None on success or a string describing the error on failure
    # Adapt to your needs
    """
    LDAP_SERVER = 'ldap://192.168.41.40'
    # fully qualified AD user name
    LDAP_USERNAME = '%s@jan.polipol.intra' % username
    print(LDAP_USERNAME)
    # your password
    LDAP_PASSWORD = password
    print(LDAP_PASSWORD)
    attrs = ['memberOf']
    try:
        # build a client
        ldap_client = ldap.initialize(LDAP_SERVER)
        # perform a synchronous bind
        ldap_client.set_option(ldap.OPT_REFERRALS,0)
        ldap_client.simple_bind_s(LDAP_USERNAME, LDAP_PASSWORD)
    except ldap.INVALID_CREDENTIALS:
        ldap_client.unbind()
        return 'Wrong username /  password'
    except ldap.SERVER_DOWN:
        return 'AD server not available'
   # all is well
   # get all user groups and store it in cerrypy session for future use
    workstations = read_machines(ldap_client,"DC=jan,DC=polipol,DC=intra")
    servers = read_svr(ldap_client,"DC=jan,DC=polipol,DC=intra")
    ldap_client.unbind()
    return None
def check_credentials_users(username, password):
    """Verifies credentials for username and password.
    Returns None on success or a string describing the error on failure
    # Adapt to your needs
    """
    LDAP_SERVER = 'ldap://192.168.41.40'
    # fully qualified AD user name
    LDAP_USERNAME = '%s@jan.polipol.intra' % username
    print(LDAP_USERNAME)
    # your password
    LDAP_PASSWORD = password
    print(LDAP_PASSWORD)
    attrs = ['memberOf']
    try:
        # build a client
        ldap_client = ldap.initialize(LDAP_SERVER)
        # perform a synchronous bind
        ldap_client.set_option(ldap.OPT_REFERRALS,0)
        ldap_client.simple_bind_s(LDAP_USERNAME, LDAP_PASSWORD)
    except ldap.INVALID_CREDENTIALS:
        ldap_client.unbind()
        return 'Wrong username /  password'
    except ldap.SERVER_DOWN:
        return 'AD server not available'
   # all is well
   # get all user groups and store it in cerrypy session for future use
    read_users(ldap_client,"DC=jan,DC=polipol,DC=intra")
    ldap_client.unbind()
    return None
def read_machines(ldap_client,base_dn):
    results = ldap_client.search_s(base_dn,ldap.SCOPE_SUBTREE,"(cn=jan-pc*)")
    for dn,entry in results:
        try:
            tmp1 = entry['distinguishedName'][0]
            tmp2 = tmp1.split('=')
            cn = entry['cn'][0]
            try:
                operatingSystem = entry['operatingSystem'][0]
            except:
                operatingSystem = ""
            try:
                description = entry['description'][0]
            except:
                description = ""
            try:
                dNSHostName = entry['dNSHostName'][0]
            except:
                dNSHostName = ""
            try:
                distinguishedName = entry['distinguishedName'][0]
            except:
                distinguishedName = ""
            try:
                OU = tmp2[0]
            except:
                OU = ""
            try:
                operatingSystemServicePack = entry['operatingSystemServicePack'][0]
            except:
                operatingSystemServicePack = ""

            if(machine.objects.filter(cn=cn).first() == None):
                comp = machine()
                comp.cn = cn
                comp.operatingSystem = operatingSystem
                comp.description= description
                comp.dNSHostName = dNSHostName
                comp.distinguishedName = distinguishedName
                comp.OU = OU
                comp.operatingSystemServicePack = operatingSystemServicePack
                comp.save()
        except:
            print(entry)
    return None
def read_svr(ldap_client,base_dn):
    results = ldap_client.search_s(base_dn,ldap.SCOPE_SUBTREE,"(&(cn=jan-svr*)(!(cn=*-pr-*)))" )
    for dn,entry in results:
        try:
            cn = entry['cn'][0]
            try:
                operatingSystem = entry['operatingSystem'][0]
            except:
                operatingSystem = ""
            try:
                description = entry['description'][0]
            except:
                description = ""
            try:
                dNSHostName = entry['dNSHostName'][0]
            except:
                dNSHostName = ""
            try:
                distinguishedName = entry['distinguishedName'][0]
            except:
                distinguishedName = ""
            try:
                operatingSystemServicePack = entry['operatingSystemServicePack'][0]
            except:
                operatingSystemServicePack = ""
            
            if(svr.objects.filter(cn=cn).first() == None):
                comp = svr()
                comp.cn = cn
                comp.operatingSystem = operatingSystem
                comp.description= description
                comp.dNSHostName = dNSHostName
                comp.distinguishedName = distinguishedName
                comp.operatingSystemServicePack = operatingSystemServicePack
                comp.save()
        except:
            print(entry)
    return None
def read_users(ldap_client,base_dn):
    results = ldap_client.search_s(base_dn,ldap.SCOPE_SUBTREE,"(sAMAccountType=805306368)")
    for dn,entry in results:
        try:
            cn = entry['cn'][0]
            try:
                distinguishedName = entry['distinguishedName'][0]
            except:
                distinguishedName = ""
                print("1")
            #try:
            #    memberOf = entry['memberOf'][0]
            #except:
            #    memberOf= ""
            #    print("2")
            try:
                primaryGroupID = entry['primaryGroupID'][0]
            except:
                primaryGroupID= ""
                print("3")
            try:
                name = entry['name'][0]
            except:
                print("4")
                name = ""
            usr = user()
            usr.cn = cn
            usr.name = name
            usr.primaryGroupID = primaryGroupID 
            usr.distinguishedName = distinguishedName
            #usr.memberOf = memberOfmemberOf
            usr.save()
        except:
            print("5")
            None
    return None
